/* tslint:disable */
/* eslint-disable */
/**
 * PolicyService API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Policy
 */
export interface Policy {
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'status': PolicyStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Policy
     */
    'yaml': string;
}

export const PolicyStatusEnum = {
    Draft: 'DRAFT',
    Published: 'PUBLISHED'
} as const;

export type PolicyStatusEnum = typeof PolicyStatusEnum[keyof typeof PolicyStatusEnum];

/**
 * 
 * @export
 * @interface PolicyDraft
 */
export interface PolicyDraft {
    /**
     * 
     * @type {string}
     * @memberof PolicyDraft
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyDraft
     */
    'version': string;
    /**
     * 
     * @type {string}
     * @memberof PolicyDraft
     */
    'status': PolicyDraftStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof PolicyDraft
     */
    'yaml': string;
}

export const PolicyDraftStatusEnum = {
    Draft: 'DRAFT',
    Published: 'PUBLISHED'
} as const;

export type PolicyDraftStatusEnum = typeof PolicyDraftStatusEnum[keyof typeof PolicyDraftStatusEnum];

/**
 * 
 * @export
 * @interface RollbackPolicyRequest
 */
export interface RollbackPolicyRequest {
    /**
     * 
     * @type {string}
     * @memberof RollbackPolicyRequest
     */
    'ver': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create draft policy
         * @param {PolicyDraft} policyDraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy: async (policyDraft: PolicyDraft, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'policyDraft' is not null or undefined
            assertParamExists('createPolicy', 'policyDraft', policyDraft)
            const localVarPath = `/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policyDraft, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get policy
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPolicy', 'id', id)
            const localVarPath = `/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/policies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Publish policy
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPolicy: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('publishPolicy', 'id', id)
            const localVarPath = `/policies/{id}:publish`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Rollback policy
         * @param {string} id 
         * @param {RollbackPolicyRequest} rollbackPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackPolicy: async (id: string, rollbackPolicyRequest: RollbackPolicyRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('rollbackPolicy', 'id', id)
            // verify required parameter 'rollbackPolicyRequest' is not null or undefined
            assertParamExists('rollbackPolicy', 'rollbackPolicyRequest', rollbackPolicyRequest)
            const localVarPath = `/policies/{id}:rollback`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(rollbackPolicyRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update policy
         * @param {string} id 
         * @param {PolicyDraft} policyDraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy: async (id: string, policyDraft: PolicyDraft, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updatePolicy', 'id', id)
            // verify required parameter 'policyDraft' is not null or undefined
            assertParamExists('updatePolicy', 'policyDraft', policyDraft)
            const localVarPath = `/policies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(policyDraft, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create draft policy
         * @param {PolicyDraft} policyDraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPolicy(policyDraft: PolicyDraft, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPolicy(policyDraft, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get policy
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPolicy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Policy>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPolicy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPolicies(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Policy>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPolicies(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listPolicies']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Publish policy
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publishPolicy(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.publishPolicy(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.publishPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Rollback policy
         * @param {string} id 
         * @param {RollbackPolicyRequest} rollbackPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rollbackPolicy(id: string, rollbackPolicyRequest: RollbackPolicyRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rollbackPolicy(id, rollbackPolicyRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rollbackPolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update policy
         * @param {string} id 
         * @param {PolicyDraft} policyDraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePolicy(id: string, policyDraft: PolicyDraft, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePolicy(id, policyDraft, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.updatePolicy']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create draft policy
         * @param {PolicyDraft} policyDraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPolicy(policyDraft: PolicyDraft, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPolicy(policyDraft, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get policy
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPolicy(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Policy> {
            return localVarFp.getPolicy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List policies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPolicies(options?: RawAxiosRequestConfig): AxiosPromise<Array<Policy>> {
            return localVarFp.listPolicies(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Publish policy
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publishPolicy(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.publishPolicy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Rollback policy
         * @param {string} id 
         * @param {RollbackPolicyRequest} rollbackPolicyRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rollbackPolicy(id: string, rollbackPolicyRequest: RollbackPolicyRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rollbackPolicy(id, rollbackPolicyRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update policy
         * @param {string} id 
         * @param {PolicyDraft} policyDraft 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePolicy(id: string, policyDraft: PolicyDraft, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePolicy(id, policyDraft, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create draft policy
     * @param {PolicyDraft} policyDraft 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createPolicy(policyDraft: PolicyDraft, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createPolicy(policyDraft, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get policy
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPolicy(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPolicy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List policies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listPolicies(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listPolicies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Publish policy
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public publishPolicy(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).publishPolicy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Rollback policy
     * @param {string} id 
     * @param {RollbackPolicyRequest} rollbackPolicyRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rollbackPolicy(id: string, rollbackPolicyRequest: RollbackPolicyRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rollbackPolicy(id, rollbackPolicyRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update policy
     * @param {string} id 
     * @param {PolicyDraft} policyDraft 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePolicy(id: string, policyDraft: PolicyDraft, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePolicy(id, policyDraft, options).then((request) => request(this.axios, this.basePath));
    }
}



